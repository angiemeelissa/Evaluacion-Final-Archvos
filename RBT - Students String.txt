class Student {
    public name: string;
    public age: number;
    public id: string; //CARNET 
    public career: string;

    constructor(name: string, age: number, id: string, career: string) {
        this.name = name;
        this.age = age;
        this.id = id; //CARNET
        this.career = career;
    }

    public toString(): string {
        return `Nombre: ${this.name}, Edad: ${this.age}, Carnet: ${this.id}, Carrera: ${this.career}`;
    }
}

class NodeRBT {
    private data: Student;
    private father!: NodeRBT;
    private leftChild!: NodeRBT;
    private rightChild!: NodeRBT;
    private color: string;

    constructor(data: Student, isLeaf?: boolean) {
        this.data = data;
        this.color = "RED";
        if (isLeaf) this.color = "BLACK";
    }

    public getData(): Student {
        return this.data;
    }

    public setFather(newFather: NodeRBT): void {
        this.father = newFather;
    }

    public getFather(): NodeRBT {
        return this.father;
    }

    public setLeftChild(newChild: NodeRBT): void {
        this.leftChild = newChild;
    }

    public getLeftChild(): NodeRBT {
        return this.leftChild;
    }

    public setRightChild(newChild: NodeRBT): void {
        this.rightChild = newChild;
    }

    public getRightChild(): NodeRBT {
        return this.rightChild;
    }

    public setNodeAsRed(): void {
        this.color = "RED";
    }

    public setNodeAsBlack(): void {
        this.color = "BLACK";
    }

    public getColor(): string {
        return this.color;
    }

    public setColor(color: string): void {
        this.color = color;
    }
}

class RBTree {
    private root: NodeRBT;
    private leaf: NodeRBT;

    constructor() {
        this.leaf = new NodeRBT(new Student("", 0, "", ""), true);
        this.root = this.leaf;
    }

    public insert(student: Student): void {
        let newNode: NodeRBT = new NodeRBT(student);
        let parent: NodeRBT = this.leaf;
        let current: NodeRBT = this.root;

        newNode.setLeftChild(this.leaf);
        newNode.setRightChild(this.leaf);

        while (current !== this.leaf) {
            parent = current;
            if (newNode.getData().id < current.getData().id) {
                current = current.getLeftChild();
            } else {
                current = current.getRightChild();
            }
        }

        newNode.setFather(parent);

        if (parent === this.leaf) {
            this.root = newNode;
        } else if (newNode.getData().id < parent.getData().id) {
            parent.setLeftChild(newNode);
        } else {
            parent.setRightChild(newNode);
        }

        if (newNode.getFather() === this.leaf) {
            newNode.setNodeAsBlack();
            return;
        }

        if (newNode.getFather().getFather() === this.leaf) {
            return;
        }

        this.fixInsert(newNode);
    }

    public search(id: string): NodeRBT | null {
        let current = this.root;
        while (current !== this.leaf) {
            if (id === current.getData().id) {
                console.log("Estudiante Encontrado:", current.getData().toString());
                return current; 
            }
            current = id < current.getData().id ? current.getLeftChild() : current.getRightChild();
        }
        console.log(`Estudiante con Carnet ${id} NO Encontrado en el Arbol`);
        return null;
    }

    private leftRotate(x: NodeRBT): void {
        let y: NodeRBT = x.getRightChild();
        x.setRightChild(y.getLeftChild());
        if (y.getLeftChild() != this.leaf) y.getLeftChild().setFather(x);
        y.setFather(x.getFather());
        if (x.getFather() == this.leaf) {
            this.root = y;
        } else if (x === x.getFather().getLeftChild()) {
            x.getFather().setLeftChild(y);
        } else {
            x.getFather().setRightChild(y);
        }
        y.setLeftChild(x);
        x.setFather(y);
    }

    private rightRotate(x: NodeRBT): void {
        let y: NodeRBT = x.getLeftChild();
        x.setLeftChild(y.getRightChild());
        if (y.getRightChild() != this.leaf) y.getRightChild().setFather(x);
        y.setFather(x.getFather());
        if (x.getFather() == this.leaf) {
            this.root = y;
        } else if (x === x.getFather().getRightChild()) {
            x.getFather().setRightChild(y);
        } else {
            x.getFather().setLeftChild(y);
        }
        y.setRightChild(x);
        x.setFather(y);
    }

    private fixInsert(testNode: NodeRBT): void {
        //BALANCEAR EL ARBOL
    }
    
    public delete(id: string): void {
        let nodeToDelete = this.search(id);
        if (!nodeToDelete || nodeToDelete === this.leaf) { 
            console.log(`Estudiante con Carnet ${id} NO Encontrado en el Arbol`);
            return;
        }
        this.deleteNode(nodeToDelete);
        console.log(`Estudiante con Carnet ${id} Eliminado del Arbol`);
    }
    
    private deleteNode(node: NodeRBT): void {
        let y = node;
        let yOriginalColor = y.getColor();
        let x: NodeRBT;

        if (node.getLeftChild() === this.leaf) {
            x = node.getRightChild();
            this.transplant(node, node.getRightChild());
        } else if (node.getRightChild() === this.leaf) {
            x = node.getLeftChild();
            this.transplant(node, node.getLeftChild());
        } else {
            y = this.minimum(node.getRightChild());
            yOriginalColor = y.getColor();
            x = y.getRightChild();
            if (y.getFather() === node) {
                x.setFather(y);
            } else {
                this.transplant(y, y.getRightChild());
                y.setRightChild(node.getRightChild());
                y.getRightChild().setFather(y);
            }
            this.transplant(node, y);
            y.setLeftChild(node.getLeftChild());
            y.getLeftChild().setFather(y);
            y.setColor(node.getColor());
        }

        if (yOriginalColor === "BLACK") {
            this.fixDelete(x);
        }
    }

    private fixDelete(x: NodeRBT): void {
        while (x !== this.root && x.getColor() === "BLACK") {
            if (x === x.getFather().getLeftChild()) {
                let sibling = x.getFather().getRightChild();
                if (sibling.getColor() === "RED") {
                    sibling.setNodeAsBlack();
                    x.getFather().setNodeAsRed();
                    this.leftRotate(x.getFather());
                    sibling = x.getFather().getRightChild();
                }
                if (sibling.getLeftChild().getColor() === "BLACK" && sibling.getRightChild().getColor() === "BLACK") {
                    sibling.setNodeAsRed();
                    x = x.getFather();
                } else {
                    if (sibling.getRightChild().getColor() === "BLACK") {
                        sibling.getLeftChild().setNodeAsBlack();
                        sibling.setNodeAsRed();
                        this.rightRotate(sibling);
                        sibling = x.getFather().getRightChild();
                    }
                    sibling.setColor(x.getFather().getColor());
                    x.getFather().setNodeAsBlack();
                    sibling.getRightChild().setNodeAsBlack();
                    this.leftRotate(x.getFather());
                    x = this.root;
                }
            } else {
                let sibling = x.getFather().getLeftChild();
                if (sibling.getColor() === "RED") {
                    sibling.setNodeAsBlack();
                    x.getFather().setNodeAsRed();
                    this.rightRotate(x.getFather());
                    sibling = x.getFather().getLeftChild();
                }
                if (sibling.getRightChild().getColor() === "BLACK" && sibling.getLeftChild().getColor() === "BLACK") {
                    sibling.setNodeAsRed();
                    x = x.getFather();
                } else {
                    if (sibling.getLeftChild().getColor() === "BLACK") {
                        sibling.getRightChild().setNodeAsBlack();
                        sibling.setNodeAsRed();
                        this.leftRotate(sibling);
                        sibling = x.getFather().getLeftChild();
                    }
                    sibling.setColor(x.getFather().getColor());
                    x.getFather().setNodeAsBlack();
                    sibling.getLeftChild().setNodeAsBlack();
                    this.rightRotate(x.getFather());
                    x = this.root;
                }
            }
        }
        x.setNodeAsBlack();
    }

    private transplant(u: NodeRBT, v: NodeRBT): void {
        if (u.getFather() === this.leaf) {
            this.root = v;
        } else if (u === u.getFather().getLeftChild()) {
            u.getFather().setLeftChild(v);
        } else {
            u.getFather().setRightChild(v);
        }
        v.setFather(u.getFather());
    }

    private minimum(node: NodeRBT): NodeRBT {
        while (node.getLeftChild() !== this.leaf) {
            node = node.getLeftChild();
        }
        return node;
    }

    private RecorridoInOrden(nodo: NodeRBT = this.root): void {
        if (nodo !== this.leaf) {
            this.RecorridoInOrden(nodo.getLeftChild());
            console.log(`${nodo.getData().toString()} (${nodo.getColor()})`);
            this.RecorridoInOrden(nodo.getRightChild());
        }
    }

    public inOrder(): void {
        this.RecorridoInOrden(this.root);
    }
}

const studentTree = new RBTree();

function addStudent(name: string, age: number, id: string, career: string) {
    const student = new Student(name, age, id, career);
    studentTree.insert(student);
    console.log(`Estudiante ${name} Agregado al Arbol.`);
}

function findStudent(id: string) {
    studentTree.search(id);
}

console.log("\nESTUDIANTES AGREGADOS:")
addStudent("Angie Santiago", 19, "EST1555123", "Ingenieria");
addStudent("Armando Champet", 21, "EST1662523", "Ingenieria");
addStudent("Taylor Swift", 34, "EST1989013", "Musica");

console.log("\nESTUDIANTES A BUSCAR");
findStudent("EST1555123");
findStudent("EST1111111");

console.log("\nESTUDIANTES EN INORDEN ANTES DE ELIMINAR");
studentTree.inOrder();

console.log("\nESTUDIANTES A ELIMINAR")
studentTree.delete("EST1555123");
studentTree.delete("EST1111111");

console.log("\nESTUDIANTES EN INORDEN DESPUES DE ELIMINAR");
studentTree.inOrder();

